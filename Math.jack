// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x > 0)
	{
		return x;	
	}
	else
	{
		return -x;
	}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int sum;
	var int i;
	var int pos;
	let sum = 0;
	if(x < 0 & y < 0)
	{
		let x = Math.abs(x);
		let y = Math.abs(y);
		let pos = 1;
	}
	else
	{
		if(x < 0 | y < 0)
		{
			let x = Math.abs(x);
			let y = Math.abs(y);
			let pos = 0;	
		}
		else
		{
			let pos = 1;
		}
	}

	let i = 0;
	while(i < y)
	{
		let sum = sum + x;
		let i = i + 1;
	}

	if(pos = 0)
	{
		let sum = -sum;
	}
	return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
	var int i;
	var int pos;
	let i = 0;
	if(x < 0 & y < 0)
	{
		let x = Math.abs(x);
		let y = Math.abs(y);
		let pos = 1;
	}
	else
	{
		if(x < 0 | y < 0)
		{
			let x = Math.abs(x);
			let y = Math.abs(y);
			let pos = 0;	
		}
		else
		{
			let pos = 1;
		}
	}

	while(x - y > -1)
	{
		let x = x - y;
		let i = i + 1;
	}

	if(pos = 0)
	{
		let i = -i;
	}
	return i;
    }

    /** Returns the integer part of the square root of x. */
	function int sqrt(int x) {
	var int i;
	let i = 0;
	while(i*i < x)
	{
		let i = i + 1;
	}
	if(i*i > x)
	{
		let i = i - 1;
	}
	return i;
    	}

    /** Returns the greater number. */
    function int max(int a, int b) {
	if(a > b)
	{
		return a;
	}
	else
	{
		return b;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if(a < b)
	{
		return a;
	}
	else
	{
		return b;
	}
    }
}
